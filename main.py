from BOT_TOKEN import BOT_TOKEN
from Weather_API_TOKEN import WEATHER_API_KEY

from telegram.ext import Application, MessageHandler, CommandHandler, filters
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import ContextTypes

import time, sqlite3, requests, aiohttp
import httpx, datetime, re

user_state = {}

GREETINGS = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥–∞—Ä–æ–≤–∞", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hi", "hello"]
GOODBYES = ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–±–∞–π", "–¥–æ –≤—Å—Ç—Ä–µ—á–∏", "–ø–∞–∫–∞"]

CUSTOM_RESPONSES = {
    "–∫–∞–∫ –¥–µ–ª–∞": "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!",
    "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å": "–Ø –º–æ–≥—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, —Å—á–∏—Ç–∞—Ç—å, –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ.",
    "—Å–ø–∞—Å–∏–±–æ": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!",
    "—Ç—ã –∫–ª–∞—Å—Å–Ω—ã–π": "–ë–ª–∞–≥–æ–¥–∞—Ä—é üòä",
    "—Ç—ã –∫—Ä—É—Ç–æ–π": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç!",
    "—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç": "–Ø —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é –∂–∏—Ç—å üòÑ",
    "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª": "–≠—Ç–æ —Ç–æ—á–Ω–æ –±—ã–ª –Ω–µ —è)",
    "–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å": lambda: f"–°–µ–≥–æ–¥–Ω—è {datetime.datetime.now().strftime('%d.%m.%Y')}",
    "–∫–∞–∫–æ–π —á–∞—Å": lambda: f"–°–µ–π—á–∞—Å {datetime.datetime.now().strftime('%H:%M')}"
}


def get_main_keyboard():
    buttons = [
        ["üîç –ü–æ–∏—Å–∫", "‚ùì –ü–æ–º–æ—â—å"],
        ["üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def get_attractions(city_name):
    url = "http://overpass-api.de/api/interpreter"

    query = f"""[out:json][timeout:25];
    area["name"="{city_name}"]->.searchArea;
    node["tourism"="attraction"](area.searchArea);
    out body;"""

    response = requests.post(url, data=query)

    if response.status_code != 200:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Overpass API")
        return []
    data = response.json()
    return [item['tags'].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') for item in data.get('elements', [])]


async def attractions(update, context):
    try:
        context2 = update.message.text.split()[1]
        response, counter, sett = list(), 75, set()

        for i, name in enumerate(get_attractions(context2), 1):
            if name != '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è' and name not in sett:
                response.append(f"{i}. {name}")
                sett.add(name)
                counter -= 1
            if counter <= 0:
                break
        await update.message.reply_text(f'–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –Ω–µ–ø–ª–æ—Ö–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≥–æ—Ä–æ–¥–∞ {context2}:\n'+ '\n'.join(response))
    except:
        await update.message.reply_text('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å')

async def geocoder(update, context):
    try:
        context2 = update.message.text.split()[1]
        geocoder_uri = "http://geocode-maps.yandex.ru/1.x/"
        response = await get_response(geocoder_uri, params={
            "apikey": "2546f784-26cb-4763-8fa4-c71067e1f0b9",
            "format": "json",
            "geocode": context2
        })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ 'response'
        if "response" not in response:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç –≥–µ–æ–∫–æ–¥–µ—Ä–∞.")
            return

        toponym = response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
        ll, spn = get_ll_spn(toponym)

        static_api_request = f"http://static-maps.yandex.ru/1.x/?ll={ll}&spn={spn}&l=map"
        await context.bot.send_photo(
            update.message.chat_id,
            static_api_request,
            caption="–ù–∞—à—ë–ª:"
        )
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def get_ll_spn(toponym):
    toponym_coodrinates = toponym["Point"]["pos"]
    toponym_longitude, toponym_lattitude = toponym_coodrinates.split(" ")

    ll = ",".join([toponym_longitude, toponym_lattitude])

    envelope = toponym["boundedBy"]["Envelope"]

    l, b = envelope["lowerCorner"].split(" ")
    r, t = envelope["upperCorner"].split(" ")

    dx = abs(float(l) - float(r)) / 2.0
    dy = abs(float(t) - float(b)) / 2.0

    span = f"{dx},{dy}"
    return ll, span


async def get_response(url, params):
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            return await resp.json()


async def get_city_coords(city_name: str):
    async with httpx.AsyncClient() as client:
        url = "https://nominatim.openstreetmap.org/search"
        params = {"q": city_name, "format": "json", "limit": 1}
        response = await client.get(url, params=params, headers={"User-Agent": "TelegramBot"})
        data = response.json()
        if data:
            return float(data[0]["lat"]), float(data[0]["lon"])
        return None


async def get_poi(lat: float, lon: float):
    api_key = ""
    url = f"https://api.opentripmap.com/0.1/en/places/radius"
    async with httpx.AsyncClient() as client:
        response = await client.get(url, params={
            "apikey": api_key,
            "radius": 20000,
            "lat": lat,
            "lon": lon,
            "limit": 5
        })
        data = response.json()
        return [f"{place['name']} ‚Äî {place.get('dist', 'N/A')} –º" for place in data]


async def search_hotels(city: str):
    return [
        f"üè® –û—Ç–µ–ª—å {city} 1",
        f"üè® –û—Ç–µ–ª—å {city} 2",
        f"üè® –û—Ç–µ–ª—å {city} 3"
    ]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state.pop(update.message.from_user.id, None)  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ.",
        reply_markup=get_main_keyboard()
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(('''/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
        /search ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
        /restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥
        –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.'''))


async def ask_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state[update.message.from_user.id] = "awaiting_city"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")


async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state.pop(update.message.from_user.id, None)
    await update.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", reply_markup=get_main_keyboard())


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message.text.lower()
    if user_state.get(user_id) == "awaiting_city":
        city = update.message.text.strip()
        coords = await get_city_coords(city)
        if not coords:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")

        lat, lon = coords

        hotels = [
            f"üè® –û—Ç–µ–ª—å {city} 1",
            f"üè® –û—Ç–µ–ª—å {city} 2",
            f"üè® –û—Ç–µ–ª—å {city} 3"
        ]
        await update.message.reply_text("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏:\n" + "\n".join(hotels))

        pois = await get_poi(lat, lon)
        await update.message.reply_text("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞:\n" + "\n".join(pois))

        user_state.pop(user_id, None)

    elif '–ø–æ–∫–∞–∂–∏' in message:
        await geocoder(update, context)
    elif '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' in message:
        await attractions(update, context)
    elif '–ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ' in message:
        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ \U00002600",
            "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
            "Rain": "–î–æ–∂–¥—å \U00002614",
            "Drizzle": "–î–æ–∂–¥—å \U00002614",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
            "Snow": "–°–Ω–µ–≥ \U0001F328",
            "Mist": "–¢—É–º–∞–Ω \U0001F32B"
        }
        try:
            r = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={message.split()[3]}&appid={WEATHER_API_KEY}&units=metric"
            )
            data = r.json()

            city = data["name"]
            cur_weather = data["main"]["temp"]

            weather_description = data["weather"][0]["main"]
            if weather_description in code_to_smile:
                wd = code_to_smile[weather_description]
            else:
                wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]
            sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
            length_of_the_day = datetime.datetime.fromtimestamp(
                data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
                data["sys"]["sunrise"])

            await update.message.reply_text(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                                            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
                                            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                                            f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}"
                                            )

        except:
            await update.message.reply_text("\U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \U00002620")

    elif message == "üîç –ø–æ–∏—Å–∫":
        await ask_city(update, context)
    elif message == "‚ùì –ø–æ–º–æ—â—å":
        await help_command(update, context)
    elif message == "üîÅ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫":
        await restart(update, context)


    elif any(greeting in message for greeting in GREETINGS):
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

    elif any(goodbye in message for goodbye in GOODBYES):
        await update.message.reply_text("–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")

    elif '–ø–æ—Å—á–∏—Ç–∞–π' in message:
        try:
            await update.message.reply_text(eval(''.join(message.split()[1:])))
        except Exception:
            await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–º–µ—Ä')

    elif message in CUSTOM_RESPONSES:
        response = CUSTOM_RESPONSES[message]
        if callable(response):
            response = response()
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ /help")


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("search", ask_city))
    application.add_handler(CommandHandler("restart", restart))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()